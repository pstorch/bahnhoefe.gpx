swagger: '2.0'
info:
  description: >-
    Backend Service for https://www.railway-stations.org/.
    Sourcecode available at: https://github.com/RailwayStations/RSAPI.
  version: '20200720.2000'
  title: RSAPI
  license:
    name: MIT
    url: 'https://github.com/RailwayStations/RSAPI/blob/master/LICENSE.txt'
host: api.railway-stations.org
basePath: /
tags:
  - name: bahnhofsfotos
    description: Photos of railway stations
    externalDocs:
      description: Find out more
      url: 'https://www.railway-stations.org'
schemes:
  - https
paths:
  '/':
    get:
      summary: Root resource with link to documentation
      produces:
        - text/html
      responses:
        '200':
          description: successful operation
  '/{country}/stations':
    get:
      summary: Finds railway stations by various query criteria
      produces:
        - application/gpx+xml
        - application/json
        - text/plain
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          type: string
        - name: hasPhoto
          in: query
          description: filter by photo availalbe/missing
          required: false
          type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          required: false
          type: string
        - name: maxDistance
          in: query
          description: filter by max distance from the coordinates given by lat and lon
          required: false
          type: integer
          format: int64
        - name: lat
          in: query
          description: latitute of the coordinates to filter by max distance
          required: false
          type: number
          format: double
        - name: lon
          in: query
          description: longitude of the coordinates to filter by max distance
          required: false
          type: number
          format: double
        - name: active
          in: query
          description: filter on active/inactive stations
          required: false
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Station'
        '404':
          description: Country not found
  /stations:
    get:
      summary: Finds railway stations by various query criteria
      produces:
        - application/gpx+xml
        - application/json
        - text/plain
      parameters:
        - name: country
          in: query
          description: filter by country code
          required: false
          type: array
          items:
            type: string
        - name: hasPhoto
          in: query
          description: filter by photo availalbe/missing
          required: false
          type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          required: false
          type: string
        - name: maxDistance
          in: query
          description: filter by max distance from the coordinates given by lat and lon
          required: false
          type: integer
          format: int64
        - name: lat
          in: query
          description: latitute of the coordinates to filter by max distance
          required: false
          type: number
          format: double
        - name: lon
          in: query
          description: longitude of the coordinates to filter by max distance
          required: false
          type: number
          format: double
        - name: active
          in: query
          description: filter on active/inactive stations
          required: false
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Station'
  '/{country}/stations/{id}':
    get:
      summary: Find a railway station by its ID
      produces:
        - application/json
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          type: string
        - name: id
          in: path
          description: id of the station
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Station'
        '404':
          description: Station not found
  '/recentPhotoImports':
    get:
      summary: List stations with photo uploads in the las 24h
      produces:
        - application/json
      parameters:
        - name: sinceHours
          in: query
          description: defines the timeframe since when to look for recent photo uploads, default is 10h
          required: false
          type: number
          format: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Station'
  '/{country}/photographers':
    get:
      summary: >-
        List of all photographers of a given country with their number of photos
        taken
      produces:
        - text/plain
        - application/json
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Photographers'
        '404':
          description: Country not found
  /photographers:
    get:
      summary: List of all photographers with their number of photos taken
      produces:
        - text/plain
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Photographers'
  '/{country}/stats':
    get:
      summary: Statistic of photos with and without photos by country
      produces:
        - text/plain
        - application/json
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Statistic'
        '404':
          description: Country not found
  /stats:
    get:
      summary: Overall statistic of photos with and without photos
      produces:
        - text/plain
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Statistic'
        '404':
          description: Country not found
  /countries:
    get:
      summary: List of all supported countries with their configuration
      produces:
        - application/json
      parameters:
        - name: onlyActive
          in: query
          description: return only active countries? Defaults to true.
          required: false
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
  /photoUpload:
    post:
      summary: Upload a new Photo
      consumes:
        - image/jpeg
        - image/png
      produces:
        - application/json
      parameters:
        - name: image
          in: body
          description: image
          required: true
          schema:
            type: string
            format: byte
        - name: Authorization
          in: header
          description: basic authorization
          type: string
        - name: Upload-Token
          in: header
          description: DEPRECATED, use basic authorization! Upload Token
          required: true
          type: string
        - name: Email
          in: header
          description: DEPRECATED, use basic authorization! Email or name of the user
          required: true
          type: string
        - name: Country
          in: header
          description: country code
          required: false
          type: string
        - name: Station-Id
          in: header
          description: id of the railwaystation
          required: false
          type: string
        - name: Content-Type
          in: header
          description: mime type of the image, "image/png" or "image/jpeg"
          required: true
          type: string
        - name: Station-Title
          in: header
          description: name of the station, for upload of missing stations (needs to be URL-encoded with UTF-8 charset)
          required: false
          type: string
        - name: Latitude
          in: header
          description: latitude, for upload of missing stations
          required: false
          type: number
          format: double
        - name: Longitude
          in: header
          description: longitude, for upload of missing stations
          required: false
          type: number
          format: double
        - name: Comment
          in: header
          description: comment of the photographer to the reviewer (needs to be URL-encoded with UTF-8 charset)
          required: false
          type: string
        - name: Active
          in: header
          description: is this station active?
          required: false
          type: boolean
      responses:
        '202':
          description: upload successful
          schema:
            $ref: '#/definitions/InboxResponse'
        '400':
          description: wrong request
          schema:
            $ref: '#/definitions/InboxResponse'
        '401':
          description: authorization failed
          schema:
            $ref: '#/definitions/InboxResponse'
        '409':
          description: photo already exists
          schema:
            $ref: '#/definitions/InboxResponse'
        '413':
          description: image too large (maximum 20 MB)
          schema:
            $ref: '#/definitions/InboxResponse'
  /reportProblem:
    post:
      summary: Report a for a Railway-Station
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: basic authorization
          type: string
        - name: problemReport
          in: body
          description: The problem report
          required: true
          schema:
            $ref: '#/definitions/ProblemReport'
      responses:
        '202':
          description: report successful
          schema:
            $ref: '#/definitions/InboxResponse'
        '400':
          description: wrong request
          schema:
            $ref: '#/definitions/InboxResponse'
        '401':
          description: authorization failed
          schema:
            $ref: '#/definitions/InboxResponse'
  /userInbox:
    post:
      summary: Query the state of photo uploads of the authorized user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: UploadStateQueries
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/InboxStateQuery'
        - name: Authorization
          in: header
          description: basic authorization
          type: string
      responses:
        '200':
          description: array UploadStateQuery objects
          schema:
            type: array
            items:
              $ref: '#/definitions/InboxStateQuery'
  /publicInbox:
    get:
      summary: Get the current public inbox, stations where photos have been uploaded
      produces:
        - application/json
      responses:
        '200':
          description: array of public inbox objects
          schema:
            type: array
            items:
              $ref: '#/definitions/PublicInboxEntry'
  /adminInboxCount:
    get:
      summary: Count pending inbox items
      produces:
        - application/json
      responses:
        200:
          description: count of pending inbox items
          schema:
            $ref: '#/definitions/InboxCountResponse'
  /adminInbox:
    get:
      summary: Get the current inbox, photos and problem reports under review.
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: basic authorization
          type: string
      responses:
        '200':
          description: array of inbox objects
          schema:
            type: array
            items:
              $ref: '#/definitions/InboxEntry'
        '401':
          description: not authorized
    post:
      summary: Import or reject an uploaded photo or a problem report from the inbox
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: UploadCommand
          in: body
          required: true
          schema:
            $ref: '#/definitions/InboxCommand'
        - name: Authorization
          in: header
          description: basic authorization
          type: string
      responses:
        '200':
          description: command successfully
        '400':
          description: bad request, something wrong with the data
        '401':
          description: not authorized
  /registration:
    post:
      summary: Register for an account
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: registration
          in: body
          description: Registration information
          required: true
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '202':
          description: registration accepted
        '400':
          description: wrong request
        '409':
          description: conflict with existing name or email
        '422':
          description: unprocessable entity, Registration input document error
  /emailVerification/{token}:
    get:
      summary: Verify eMail-Address with verification token
      parameters:
        - name: token
          in: path
          required: true
          type: string
      responses:
        '200':
          description: email successfully verified
        '400':
          description: token not found, verification failed
  /resendEmailVerification:
    post:
      summary: Sends a new eMail-Verification mail
      parameters:
        - name: Authorization
          in: header
          description: basic authorization with old password
          type: string
      responses:
        '200':
          description: email successfully sent
  /resetPassword:
    post:
      summary: Requests a new password only
      parameters:
        - name: NameOrEmail
          in: header
          description: name or email of the user
          required: true
          type: string
      responses:
        '202':
          description: request accepted, email with new password will be sent
        '400':
          description: bad request, probably due to email not set
        '404':
          description: User not found
  /newUploadToken:
    post:
      summary: Requests a new Upload-Token (now password) only
      description: DEPRECATED, use reset password
      parameters:
        - name: Email
          in: header
          description: email or name of the user
          required: true
          type: string
      responses:
        '202':
          description: request accepted, email with new password (uploadToken) will be sent
        '400':
          description: bad request, probably due to email not set
        '404':
          description: User not found
  /changePassword:
    post:
      summary: Change user password
      parameters:
        - name: Authorization
          in: header
          description: basic authorization with old password
          type: string
        - name: New-Password
          in: header
          description: new password
          required: true
          type: string
      responses:
        '200':
          description: password changed
        '400':
          description: bad request, e.g. empty password, too short (< 8 chars)
        '404':
          description: User not found
  /myProfile:
    get:
      summary: Get the users profile
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: basic authorization
          type: string
        - name: Upload-Token
          in: header
          description: DEPRECATED, use basic authorization! Upload Token
          required: true
          type: string
        - name: Email
          in: header
          description: DEPRECATED, use basic authorization! Email or name of the user
          required: true
          type: string
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/Profile'
        '401':
          description: wrong token
    post:
      summary: Update the users profile. In case the email has been changed, only the email is saved and a new password / Upload-Token is send.
      consumes:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: basic authorization
          type: string
        - name: Upload-Token
          in: header
          description: DEPRECATED, use basic authorization! Upload Token
          required: true
          type: string
        - name: Email
          in: header
          description: DEPRECATED, use basic authorization! Email or name of the user
          required: true
          type: string
        - name: profile
          in: body
          description: Userprofile
          required: true
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '200':
          description: ok
        '400':
          description: wrong request
        '401':
          description: authorization failed
        '409':
          description: conflict with existing name or email
  '/fotos/{country}/{filename}':
    get:
      summary: downloads the given photo
      produces:
        - image/jpeg
        - image/png
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          type: string
        - name: filename
          in: path
          description: filename of the photo
          required: true
          type: string
        - name: width
          in: query
          description: scale the image to the given width
          type: number
          format: integer
      responses:
        '200':
          description: ok
        '404':
          description: file not found
  '/photos/{country}/{filename}':
    get:
      summary: downloads the given photo
      produces:
        - image/jpeg
        - image/png
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          type: string
        - name: filename
          in: path
          description: filename of the photo
          required: true
          type: string
        - name: width
          in: query
          description: scale the image to the given width
          type: number
          format: integer
      responses:
        '200':
          description: ok
        '404':
          description: file not found
  '/inbox/{filename}':
    get:
      summary: downloads the given photo from the inbox
      produces:
        - image/jpeg
        - image/png
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          type: string
        - name: filename
          in: path
          description: filename of the photo
          required: true
          type: string
        - name: width
          in: query
          description: scale the image to the given width
          type: number
          format: integer
      responses:
        '200':
          description: ok
        '404':
          description: file not found
  '/inbox/processed/{filename}':
    get:
      summary: downloads the given photo from the processed inbox
      produces:
        - image/jpeg
        - image/png
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          type: string
        - name: filename
          in: path
          description: filename of the photo
          required: true
          type: string
        - name: width
          in: query
          description: scale the image to the given width
          type: number
          format: integer
      responses:
        '200':
          description: ok
        '404':
          description: file not found
definitions:
  Station:
    type: object
    properties:
      idStr:
        type: string
        description: Unique ID of the station per country
      id:
        type: integer
        format: int64
        description: DEPRECATED! Unique (numeric) ID of the station per country
      country:
        type: string
        description: Two character country code
      title:
        type: string
        description: Name of the station
      photographer:
        type: string
        description: Nickname of the photographer
      photographerUrl:
        type: string
        description: Link to the photographer
      photoUrl:
        type: string
        description: URL of the photo
      license:
        type: string
        description: License of the photo, clients need to link to an online version of the license text
      licenseUrl:
        type: string
        description: The URL of the license text. Clients should use this to link to the online version of the license text
      lat:
        type: number
        format: double
        description: Latitude of the station
      lon:
        type: number
        format: double
        description: Longitute of the station
      createdAt:
        type: number
        format: int64
        description: Timestamp when the photo was created in the railway-stations database (Milliseconds since 1.1.1970)
      DS100:
        type: string
        description: A short code of the station, depending on the country
  Photographers:
    type: object
    description: >-
      JSON Object with photographers nickname as parameter and number of photos
      as their value
  Statistic:
    type: object
    description: Statistic of number of stations with and without photos
    properties:
      total:
        type: integer
        format: int64
      withPhoto:
        type: integer
        format: int64
      withoutPhoto:
        type: integer
        format: int64
      photographers:
        type: integer
        format: int64
  Country:
    type: object
    description: Supported Country with its configuration
    properties:
      code:
        type: string
        description: Two letter country code
      email:
        type: string
        description: Email Address to send photos to
      twitterTags:
        type: string
        description: Twitter Tags when sharing the photo on Twitter
      timetableUrlTemplate:
        type: string
        description: URL template for the timetable, contains {title}, {id} and {DS100} placeholders which need to be replaced
      overrideLicense:
        type: string
        description: if a country needs a special license
      active:
        type: boolean
        description: Is this an active country where we collect photos?
      providerApps:
        type: array
        description: array with links to provider apps
        items:
          $ref: '#/definitions/ProviderApp'
  ProviderApp:
    type: object
    description: Provider App information
    properties:
      type:
        enum:
          - android
          - ios
          - web
        type: string
      name:
        type: string
      url:
        type: string
  Profile:
    type: object
    description: User profile information
    properties:
      nickname:
        type: string
      email:
        type: string
        format: email
      license:
        enum:
          - CC0
          - CC0 1.0 Universell (CC0 1.0)
          - CC4
          - CC BY-SA 4.0
        type: string
      photoOwner:
        type: boolean
      link:
        type: string
      anonymous:
        type: boolean
      admin:
        type: admin
      newPassword:
        type: string
      emailVerified:
        type: boolean
      sendNotifications:
        type: boolean
  InboxResponse:
    type: object
    description: Response status of photo uploads and problem reports
    properties:
      state:
        enum:
          - REVIEW
          - LAT_LON_OUT_OF_RANGE
          - NOT_ENOUGH_DATA
          - UNSUPPORTED_CONTENT_TYPE
          - PHOTO_TOO_LARGE
          - CONFLICT
          - UNAUTHORIZED
          - ERROR
      message:
        type: string
      id:
        type: number
        format: integer
      filename:
        type: string
        description: filename in inbox
      inboxUrl:
        type: string
        description: url of the photo in the inbox
      crc32:
        type: number
        format: long
        description: CRC32 checksum of the uploaded photo
  InboxStateQuery:
    type: object
    description: Upload state query
    properties:
      id:
        type: integer
      countryCode:
        type: string
      stationId:
        type: number
        format: integer
      lat:
        type: number
        format: double
      lon:
        type: number
        format: double
      rejectedReason:
        type: string
      filename:
        type: string
        description: filename in inbox
      inboxUrl:
        type: string
        description: url of the photo in the inbox
      crc32:
        type: number
        format: long
        description: CRC32 checksum of the uploaded photo
      state:
        enum:
          - UNKNOWN
          - REVIEW
          - CONFLICT
          - ACCEPTED
          - REJECTED
  PublicInboxEntry:
    type: object
    description: Represents an uploaded photo under review
    properties:
      countryCode:
        type: string
      stationId:
        type: string
      title:
        type: string
      lat:
        type: number
        format: double
      lon:
        type: number
        format: double
  InboxEntry:
    type: object
    description: Represents an uploaded photo with processing state
    properties:
      id:
        type: number
        format: integer
      countryCode:
        type: string
      stationId:
        type: string
      title:
        type: string
      lat:
        type: number
        format: double
      lon:
        type: number
        format: double
      photographerNickname:
        type: string
      photographerEmail:
        type: string
      comment:
        type: string
      createdAt:
        type: number
        format: long
      done:
        type: boolean
        description: true if this photo was already imported or rejected
      filename:
        type: string
        description: name of the file in inbox
      inboxUrl:
        type: string
        description: url of the photo in the inbox
      hasPhoto:
        type: boolean
        description: this station has already a photo (conflict)
      hasConflict:
        type: boolean
        description: conflict with another upload or existing photo
      problemReportType:
        enum:
          - WRONG_LOCATION
          - STATION_INACTIVE
          - STATION_NONEXISTENT
          - WRONG_PHOTO
          - OTHER
      isProcessed:
        type: boolean
        description: was this image process (e.g. pixelated)
      active:
        type: boolean
        description: active flag provided by the user
  InboxCommand:
    type: object
    description: command to import or reject an inbox entry
    properties:
      id:
        type: number
        format: integer
      countryCode:
        type: string
        description: country of a new station
      stationId:
        type: string
        description: ID of a new station
      rejectReason:
        type: string
        description: explanation of a rejection
      DS100:
        type: string
        description: DS100 attribute of a new station
      active:
        type: boolean
        description: active flag of a new station (default true)
      ignoreConflict:
        type: boolean
        description: ignore a conflict
      createStation:
        type: boolean
        description: create the station if it doesn't exist
      command:
        enum:
          - IMPORT
          - ACTIVATE_STATION
          - DEACTIVATE_STATION
          - DELETE_STATION
          - DELETE_PHOTO
          - MARK_SOLVED
          - REJECT
          - CHANGE_NAME
          - UPDATE_LOCATION
  InboxCountResponse:
    type: object
    description: counts the pending inbox entries
    properties:
      pendingInboxEntries:
        type: number
        format: integer
  ProblemReport:
    type: object
    description: Represents a report of a problem with a station
    properties:
      countryCode:
        type: string
      stationId:
        type: string
      comment:
        type: string
      type:
        enum:
          - WRONG_LOCATION
          - STATION_ACTIVE
          - STATION_INACTIVE
          - STATION_NONEXISTENT
          - WRONG_PHOTO
          - OTHER
          - WRONG_NAME
      lat:
        type: number
        format: double
      lon:
        type: number
        format: double
